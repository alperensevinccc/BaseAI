['import ast', '', 'class CodeAnalyzer:', '    def __init__(self, code_string: str):', '        self.ast_tree = ast.parse(code_string)', '    def get_functions(self) -> list:', '        return [node.id for node in ast.walk(self.ast_tree) if isinstance(node, ast.FunctionDef)]', '    def get_classes(self) -> list:', '        return [node.name for node in ast.walk(self.ast_tree) if isinstance(node, ast.ClassDef)]', '    def get_imports(self) -> list:', '        imports = []', '        for node in ast.walk(self.ast_tree):', '            if isinstance(node, ast.Import):', '                for alias in node.names:', '                    imports.append(alias.name)', '            elif isinstance(node, ast.ImportFrom):', '                imports.append(node.module)', '        return imports']
