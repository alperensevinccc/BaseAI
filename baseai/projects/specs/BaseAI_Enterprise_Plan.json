{
  "baseai/config/fsops_policy.json": "{\n  \"mode\": \"semantic\",\n  \"allow_delete\": false,\n  \"allow_rename\": true,\n  \"allow_create\": true,\n  \"protected_paths\": [\"baseai/core\",\"baseai/log\",\"baseai/policy\",\"baseai/bridges\",\"tests\",\"backups\"],\n  \"diff_log\": \"baseai/logs/auto_dev_diff.log\",\n  \"max_insertions_per_file\": 2000,\n  \"dry_run\": false\n}\n",
  "baseai/core/constants.py": "from __future__ import annotations\n\n# Global, stable flags for AutoDev safety\nAUTO_DEV_WRITE_MODE: str = \"semantic\"\nAUTO_DEV_SAFE_EDIT: bool = True\nAUTO_DEV_DIFF_LOG: str = \"baseai/logs/auto_dev_diff.log\"\n\n__all__ = [\"AUTO_DEV_WRITE_MODE\", \"AUTO_DEV_SAFE_EDIT\", \"AUTO_DEV_DIFF_LOG\"]\n",
  "baseai/tools/ci_guard.py": "from __future__ import annotations\nimport subprocess, sys\n\ndef run(cmd: list[str]) -> int:\n    print(\"→\", \" \".join(cmd), flush=True)\n    return subprocess.call(cmd)\n\ndef main() -> None:\n    code = 0\n    code |= run([sys.executable, \"-m\", \"ruff\", \"check\", \".\", \"--fix\"]) or 0\n    code |= run([sys.executable, \"-m\", \"black\", \".\"]) or 0\n    # mypy bazı köprüleri ignore ediyor — başarısız olursa non-zero olmasın\n    run([sys.executable, \"-m\", \"mypy\", \"baseai\"]) \n    code |= run([sys.executable, \"-m\", \"pytest\", \"-q\"]) or 0\n    sys.exit(code)\n\nif __name__ == \"__main__\":\n    main()\n",
  "tests/test_contracts_baseai.py": "from __future__ import annotations\nfrom baseai.core.constants import AUTO_DEV_WRITE_MODE, AUTO_DEV_SAFE_EDIT\n\ndef test_constants_sanity() -> None:\n    assert AUTO_DEV_WRITE_MODE == \"semantic\"\n    assert AUTO_DEV_SAFE_EDIT is True\n"
}
