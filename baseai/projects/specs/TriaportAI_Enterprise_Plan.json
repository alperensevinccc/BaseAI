{
  "apps/triaport-ai/__init__.py": "",
  "apps/triaport-ai/main.py": "from __future__ import annotations\nfrom fastapi import FastAPI\nfrom .routes.quotes import router as quotes_router\nfrom .routes.bookings import router as bookings_router\n\napp = FastAPI(title=\"TriaportAI\", version=\"1.0\")\n\n@app.get(\"/health\")\ndef health() -> dict:\n    return {\"ok\": True}\n\napp.include_router(quotes_router, prefix=\"/api/v1\")\napp.include_router(bookings_router, prefix=\"/api/v1\")\n",
  "apps/triaport-ai/core/models.py": "from __future__ import annotations\nfrom pydantic import BaseModel, Field\n\nclass QuoteRequest(BaseModel):\n    origin: str\n    destination: str\n    incoterm: str = Field(pattern=r\"^[A-Z]{3}$\")\n    weight_kg: float\n    volume_cbm: float\n    containers: int = 1\n\nclass QuoteResponse(BaseModel):\n    currency: str = \"USD\"\n    freight: float\n    surcharges: float\n    total: float\n\nclass BookingRequest(BaseModel):\n    quote_id: str\n    shipper: str\n    consignee: str\n    notify: str | None = None\n\nclass BookingResponse(BaseModel):\n    booking_id: str\n    status: str\n",
  "apps/triaport-ai/core/services.py": "from __future__ import annotations\nfrom .models import QuoteRequest, QuoteResponse, BookingRequest, BookingResponse\n\nBASE_RATE_PER_CBM = 50.0\nBASE_RATE_PER_KG = 0.12\nSURCHARGE_RATIO = 0.18\n\nclass PricingService:\n    @staticmethod\n    def price(req: QuoteRequest) -> QuoteResponse:\n        base = max(req.volume_cbm * BASE_RATE_PER_CBM, req.weight_kg * BASE_RATE_PER_KG)\n        sur = base * SURCHARGE_RATIO\n        return QuoteResponse(freight=round(base, 2), surcharges=round(sur, 2), total=round(base + sur, 2))\n\nclass BookingService:\n    @staticmethod\n    def create(req: BookingRequest) -> BookingResponse:\n        # Real system would validate quote, carrier schedule, space, etc.\n        return BookingResponse(booking_id=f\"BKG-{req.quote_id[:8]}\", status=\"created\")\n",
  "apps/triaport-ai/routes/quotes.py": "from __future__ import annotations\nfrom fastapi import APIRouter\nfrom ..core.models import QuoteRequest, QuoteResponse\nfrom ..core.services import PricingService\n\nrouter = APIRouter(tags=[\"quotes\"])\n\n@router.post(\"/quotes\", response_model=QuoteResponse)\ndef create_quote(req: QuoteRequest) -> QuoteResponse:\n    return PricingService.price(req)\n",
  "apps/triaport-ai/routes/bookings.py": "from __future__ import annotations\nfrom fastapi import APIRouter\nfrom ..core.models import BookingRequest, BookingResponse\nfrom ..core.services import BookingService\n\nrouter = APIRouter(tags=[\"bookings\"])\n\n@router.post(\"/bookings\", response_model=BookingResponse)\ndef create_booking(req: BookingRequest) -> BookingResponse:\n    return BookingService.create(req)\n",
  "apps/triaport-ai/utils/email_gateway.py": "from __future__ import annotations\nfrom typing import Any\n\nclass EmailGateway:\n    \"\"\"Stub for Gmail integration. Real impl will use OAuth + Gmail API.\n    Kept as a seam for future: send_quote, send_booking, receive_messages.\n    \"\"\"\n    def send_quote(self, to: str, payload: dict[str, Any]) -> None:  # pragma: no cover\n        _ = (to, payload)\n\n    def send_booking(self, to: str, payload: dict[str, Any]) -> None:  # pragma: no cover\n        _ = (to, payload)\n",
  "apps/triaport-ai/config/settings.py": "from __future__ import annotations\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    app_name: str = \"TriaportAI\"\n    currency: str = \"USD\"\n\nsettings = Settings()\n",
  "apps/triaport-ai/docs/templates/bill_of_lading_tr.md": "# Konşimento (Taslak)\\n\\n- Taşıyan: \\n- Yükleten: \\n- Alıcı: \\n- Bildirilecek: \\n- Yükleme Limanı: \\n- Boşaltma Limanı: \\n- Navlun: \\n- Teslim Şekli: \\n- Tarih: \\n",
  "apps/triaport-ai/docs/templates/bill_of_lading_en.md": "# Bill of Lading (Draft)\\n\\n- Carrier:\\n- Shipper:\\n- Consignee:\\n- Notify Party:\\n- Port of Loading:\\n- Port of Discharge:\\n- Freight:\\n- Incoterm:\\n- Date:\\n",
  "apps/triaport-ai/docs/templates/sea_waybill_tr.md": "# Deniz Yolu Taşıma Senedi (Taslak)\\n",
  "apps/triaport-ai/docs/templates/sea_waybill_en.md": "# Sea Waybill (Draft)\\n",
  "apps/triaport-ai/tests/test_smoke.py": "from __future__ import annotations\nfrom fastapi.testclient import TestClient\nfrom apps.triaport-ai.main import app\n\ndef test_health() -> None:\n    c = TestClient(app)\n    r = c.get(\"/health\")\n    assert r.status_code == 200 and r.json().get(\"ok\") is True\n\ndef test_quote_and_booking_flow() -> None:\n    c = TestClient(app)\n    q = c.post(\"/api/v1/quotes\", json={\"origin\":\"Mersin\",\"destination\":\"Hamburg\",\"incoterm\":\"FOB\",\"weight_kg\":1200.0,\"volume_cbm\":8.5,\"containers\":1})\n    assert q.status_code == 200\n    quote = q.json()\n    b = c.post(\"/api/v1/bookings\", json={\"quote_id\":\"Q12345678\",\"shipper\":\"Triaport OÜ\",\"consignee\":\"Client GmbH\"})\n    assert b.status_code == 200\n"
}
